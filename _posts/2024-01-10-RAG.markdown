---
layout: single
title:  "Floor System Design"
date:   2024-01-09 19:03:13 -0800
categories: AI
author_profile: true
---

When building my second-hand book trading platform, one critical design decision was choosing **frontend or backend pagination**. This choice impacts not only performance but also scalability and user experience.

---

##  Project Overview

Platform integrates:

- Google Books API for auto-completing book info by title/ISBN
- Book posting for donate/request/trade
- User interactions: comments, favorites, requests
- Real-time updates of availability & transaction history

Pagination is used in:

- Book search results
- User's gifts & wishes
- Favorites, comments, transaction history

---

## Frontend Pagination

A lightweight, frontend-driven approach offers fast rendering and easy implementation with minimal backend impact, but lacks access control, strong SEO, and advanced filteringâ€”posing risks for sensitive data exposure.

##  Backend Pagination

**Used for:**

- Any local data: user books, transactions, comments, favorites
- Complex filters, personalized views, role-based access

**Example API:**

```
GET /api/books/mine?page=2&pageSize=10&status=donated&sort=created_at_desc
```

**Response:**

```json
{
  "data": [...],
  "page": 2,
  "pageSize": 10,
  "total": 53,
  "totalPages": 6
}
```

**Features:**

- Query optimization (LIMIT, OFFSET, or keyset pagination)
- Advanced filters, sorting
- Role & ownership checks
- Total counts for frontend components

## Comparison Table

| Dimension           | Frontend Pagination      | Backend Pagination                  |
|---------------------|---------------------------|--------------------------------------|
| Data Processing     | Client slicing            | Optimized DB query + filtering       |
| Network Efficiency  | May fetch large datasets  | Compact responses                    |
| Access Control      | Cannot enforce            | Strict per-user or per-role          |
| SEO                 | Weak                      | SSR/SSG-friendly                     |
| Filtering/Sorting   | Hardcoded or limited      | Flexible query logic                 |
| Real-time Accuracy  | Needs refresh             | Always current                       |

## A Hybrid Pagination Strategy

| Module               | Strategy                 | Notes                                               |
|----------------------|--------------------------|-----------------------------------------------------|
| Google Books Search  | Frontend (Google API)    | Uses `startIndex` and `maxResults`                 |
| User Bookshelf       | Backend Pagination       | Django ORM with filters & sorting                  |
| Comments / Messages  | Backend Pagination       | Sorted by timestamp, offset-based                  |
| Static Lists         | Frontend Pagination      | In-memory slicing (faster UX)                      |
| Favorites            | Backend + Caching        | Redis stores ID list, then paged in DB             |



**Use backend pagination** for anything involving:
- Sensitive data
- Access control
- Dynamic filtering/sorting
- Realtime freshness

**Use frontend pagination** for:

- Lightweight, static, or cached lists
- Public APIs like Google Books

